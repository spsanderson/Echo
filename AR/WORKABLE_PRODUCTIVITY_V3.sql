/*
***********************************************************************
File: WORKABLE_PRODUCTIVITY.sql

Input Parameters:
	@PRODUCTIVITY_DATE (DATETIME) - The date for productivity data.
	@WORKABLE_DATE (DATE) - The date for workable indicator data.

Tables/Views:
	SMS.dbo.c_productivity_combined
	SMS.dbo.C_WORKABLE_INDICATOR_DETAIL_TBL
	SMS.DBO.Pt_Accounting_Reporting_for_tableau
	SMS.dbo.c_finthrive_productivity_tbl
	SMS.dbo.c_finthrive_emp_crosswalk_tbl
	swarm.dbo.CW_DTL_productivity
	SMS.dbo.revenue_cycle_employee_listing

Creates Table:
	#BASE_POP
	#ACCTS_WORKED_NOT_IN_SNAPSHOT_TBL
	#ACCTS_WORKED_IN_SNAPSHOT_TBL
	#ACCTS_WORKED_TBL
	#ACCT_DOLLARS_NOT_IN_SNAPSHOT_TBL
	#ACCT_DOLLARS_IN_SNAPSHOT_TBL
	#ACCTS_DOLLARS_WORKED
	#TEMPA
	#TempDepartments
	#TEMPB
	#TEMPC
	#INVISION_PRODUCTIVITY_SNAP_TBL
	#FINTHRIVE_DATA_TBL
	#INVENTORY_TEMP_TBL
	#ENDING_INVENTORY_TBL

Functions:
	TRY_CONVERT

Author: Steven P Sanderson II, MPH

Department: Finance, Revenue Cycle

Purpose/Description:
	This script processes productivity and workable indicator data to generate
	account-level details, including accounts worked and dollars worked, for
	further analysis and reporting.

Revision History:
Date		Version		Description
----		----		----
2025-06-02	v1			Initial Creation
2025-06-05	v2			Added FinThrive data integration and refined account-level details.
2025-06-06	v3			Added Worklist Logic to get New, Old, Off for
						productivity metrics.
2025-06-09	v4			Updated the UNIT_DATE to be DATETIME2
						to match the format in the productivity table.
						UNIT_DATE = CAST(CAST(UNIT_DATE AS DATETIME2) AS DATETIME),
						This affects the #INVISION_PRODUCTIVITY_SNAP_TBL
2025-06-10  v5			Added the FINTHRIVE_DEPARTMENT to the final output
                        and cleaned up the DEPARTMENT_CLEAN field to match
                        the FINTHRIVE_DEPARTMENT.
***********************************************************************
*/

-- DEFINE ALL VARIABLES
DECLARE @PRODUCTIVITY_DATE AS DATETIME;
DECLARE @WORKABLE_DATE AS DATE;
DECLARE @FINTHRIVE_START_DATE DATE;
DECLARE @FINTHRIVE_END_DATE DATE;
DECLARE @ThisDate DATE;
DECLARE @PRODREPORTDATE DATETIME

SET @ThisDate = CAST(GETDATE() AS DATE);
SET @FINTHRIVE_START_DATE = dateadd(day, -1, dateadd(wk, datediff(wk, 0, @ThisDate) - 1, 0));
SET @FINTHRIVE_END_DATE = dateadd(day, -2, dateadd(wk, datediff(wk, 0, @ThisDate), 0));
SET @PRODUCTIVITY_DATE = (
	SELECT RRD.report_run_date
	FROM (
	SELECT report_run_date,
		RN = ROW_NUMBER() OVER(
			ORDER BY REPORT_RUN_DATE DESC
		)
	FROM SMS.dbo.c_productivity_combined
	GROUP BY report_run_date
	) AS RRD
	WHERE RRD.RN = 1
);
SET @WORKABLE_DATE = (
	SELECT TOP 1 RRD.REPORT_RUN_DATE
	FROM (
		SELECT TOP 2 REPORT_RUN_DATE
		FROM SMS.dbo.C_WORKABLE_INDICATOR_DETAIL_TBL
		GROUP BY Report_Run_Date
		ORDER BY Report_Run_Date DESC
	) AS RRD
	ORDER BY RRD.Report_Run_Date
);
SET @PRODREPORTDATE = dateadd(day, - 1, dateadd(wk, datediff(wk, 0, @ThisDate) - 1, - 1));

-- Define the base table
DROP TABLE IF EXISTS #BASE_POP;
SELECT PT_NO,
	UNIT_NO,
	UNIT_DATE,
	DEPARTMENT_CLEAN,
	WORKABLE_INDICATOR
INTO #BASE_POP
FROM SMS.dbo.C_workable_indicator_detail_tbl
WHERE [FILE] NOT IN ('BAD DEBT')
AND Report_Run_Date = @WORKABLE_DATE;

/* ACCOUNTS WORKED

THERE WILL BE ACCOUNTS THAT ARE WORKED BUT NOT IN THE SNAPSHOT FOR VARIOUS REASONS
FOR EXAMPLE THE BALANCE AT SNAPSHOT TIME IS 0 AND IT IS NOT WORKLISTED.

*/
DROP TABLE IF EXISTS #ACCTS_WORKED_NOT_IN_SNAPSHOT_TBL;
SELECT B.PT_NO,
	B.DEPT,
	B.UNIT_DATE,
	B.UNIT,
	ACCTS_WORKED = 1
INTO #ACCTS_WORKED_NOT_IN_SNAPSHOT_TBL
FROM #BASE_POP AS A 
RIGHT JOIN SMS.dbo.c_productivity_combined AS B ON A.PT_NO = B.PT_NO
WHERE B.report_run_date = @PRODUCTIVITY_DATE
AND A.PT_NO IS NULL
GROUP BY B.DEPT,
	B.UNIQUE_USER_ID,
	B.FOL_AMT,
	B.UNIQUE_DATE,
	B.PT_NO,
	B.UNIT_DATE,
	B.UNIT;

DROP TABLE IF EXISTS #ACCTS_WORKED_IN_SNAPSHOT_TBL;
SELECT B.PT_NO,
	B.DEPT,
	B.UNIT_DATE,
	B.UNIT,
	ACCTS_WORKED = 1
INTO #ACCTS_WORKED_IN_SNAPSHOT_TBL
FROM #BASE_POP AS A
LEFT JOIN SMS.DBO.c_productivity_combined AS B ON A.PT_NO = B.PT_NO
WHERE B.report_run_date = @PRODUCTIVITY_DATE
GROUP BY B.DEPT,
	B.UNIQUE_USER_ID,
	B.FOL_AMT,
	B.UNIQUE_DATE,
	B.PT_NO,
	B.UNIT_DATE,
	B.UNIT;

DROP TABLE IF EXISTS #ACCTS_WORKED_TBL;
SELECT A.PT_NO,
	A.DEPT,
	A.UNIT_DATE,
	A.UNIT,
	A.ACCTS_WORKED
INTO #ACCTS_WORKED_TBL
FROM (
	SELECT PT_NO,
		DEPT,
		UNIT_DATE,
		UNIT,
		ACCTS_WORKED
	FROM #ACCTS_WORKED_NOT_IN_SNAPSHOT_TBL

	UNION ALL

	SELECT PT_NO,
		DEPT,
		UNIT_DATE,
		UNIT,
		ACCTS_WORKED
	FROM #ACCTS_WORKED_IN_SNAPSHOT_TBL
) AS A;

/* ACCOUNTS DOLLARS WORKED

THERE WILL BE ACCOUTNS THAT ARE WORKED BUT NOT IN THE SNAPSHOT FOR VARIOUS REASONS
FOR EXAMPLE THE BALANCE AT SNAPSHOT TIME IS 0 AND IT IS NOT WORKLISTED.

*/
DROP TABLE IF EXISTS #ACCT_DOLLARS_NOT_IN_SNAPSHOT_TBL;
SELECT B.PT_NO,
	B.DEPT,
	B.UNIT_DATE,
	B.UNIT,
	FOLLOWUP_AMT = SUM(ISNULL(CAST(FOL_AMT AS FLOAT), 0))
INTO #ACCT_DOLLARS_NOT_IN_SNAPSHOT_TBL
FROM #BASE_POP AS A
RIGHT JOIN SMS.dbo.c_productivity_combined AS B ON A.PT_NO = B.PT_NO
WHERE B.report_run_date = @PRODUCTIVITY_DATE
AND A.PT_NO IS NULL
GROUP BY B.DEPT,
	B.UNIQUE_USER_ID,
	B.FOL_AMT,
	B.UNIQUE_DATE,
	B.PT_NO,
	B.UNIT_DATE,
	B.UNIT;

DROP TABLE IF EXISTS #ACCT_DOLLARS_IN_SNAPSHOT_TBL;
SELECT B.PT_NO,
	B.DEPT,
	B.UNIT_DATE,
	B.UNIT,
	FOLLOWUP_AMT = SUM(ISNULL(CAST(FOL_AMT AS FLOAT), 0))
INTO #ACCT_DOLLARS_IN_SNAPSHOT_TBL
FROM #BASE_POP AS A
LEFT JOIN SMS.dbo.c_productivity_combined AS B ON A.PT_NO = B.PT_NO
WHERE B.report_run_date = @PRODUCTIVITY_DATE
GROUP BY B.DEPT,
	B.UNIQUE_USER_ID,
	B.FOL_AMT,
	B.UNIQUE_DATE,
	B.PT_NO,
	B.unit_date,
	B.UNIT;

DROP TABLE IF EXISTS #ACCTS_DOLLARS_WORKED;
SELECT A.PT_NO,
	A.DEPT,
	A.UNIT_DATE,
	A.UNIT,
	FOLLOWUP_AMT = FOLLOWUP_AMT-- SUM(FOLLOWUP_AMT)
INTO #ACCTS_DOLLARS_WORKED
FROM (
	SELECT PT_NO,
		DEPT,
		UNIT_DATE,
		UNIT,
		FOLLOWUP_AMT
	FROM #ACCT_DOLLARS_NOT_IN_SNAPSHOT_TBL

	UNION ALL
	
	SELECT PT_NO,
		DEPT,
		UNIT_DATE,
		UNIT,
		FOLLOWUP_AMT
	FROM #ACCT_DOLLARS_IN_SNAPSHOT_TBL
) AS A

/*

Get the account level data along with if the account was worked along with how many
dollars were worked that show up in the snapshot data.

*/
DROP TABLE IF EXISTS #TEMPA;
SELECT A.PT_NO,
	A.UNIT_NO,
	A.UNIT_DATE,
	A.DEPARTMENT_CLEAN,
	A.WORKABLE_INDICATOR,
	ACCTS_WORKED = (
		SELECT SUM(ACCTS_WORKED)
		FROM #ACCTS_WORKED_IN_SNAPSHOT_TBL AS Z
		WHERE Z.PT_NO = A.PT_NO
			AND ((
				A.UNIT_NO IS NULL
				AND Z.UNIT = 'A'
			)
			OR (
				A.UNIT_NO IS NOT NULL
				AND Z.UNIT != 'A'
				AND A.UNIT_NO = TRY_CONVERT(INT, Z.UNIT)
			)
			OR (
				A.UNIT_NO IS NOT NULL
				AND Z.UNIT = 'A'
			))
	),
	DOLLARS_WORKED = (
		SELECT SUM(Z.FOLLOWUP_AMT)
		FROM #ACCT_DOLLARS_IN_SNAPSHOT_TBL AS Z
		WHERE Z.PT_NO = A.PT_NO
			AND ((
				A.UNIT_NO IS NULL
				AND Z.UNIT = 'A'
			)
			OR (
				A.UNIT_NO IS NOT NULL
				AND Z.UNIT != 'A'
				AND A.UNIT_NO = TRY_CONVERT(INT, Z.UNIT)
			)
			OR (
				A.UNIT_NO IS NOT NULL
				AND Z.UNIT = 'A'
			))
	)
INTO #TEMPA
FROM #BASE_POP AS A;

/*
THE BELOW GETS ACCOUNTS THAT WERE WORKED IN PRODUCTIVITY BUT ARE NOT
SHOWING UP IN THE SNAPSHOT TABLE FOR ONE REASON OR ANTOHER, EXACMPLE
THEY ARE IN BAD DEBT OR THE BALANCE ON THE ACCOUNT IS $0 AND IT IS NOT
WORKLISTED AT THE TIME OF THE SNAPSHOT.
*/
-- GET MISSING DATA, IN PRODUCTIVITY BUT NOT IN SNAPSHOT
-- FIRST CREATE A DEPT TO DEPARTMENT_CLEANED TABLE KEY
-- Create the temporary table
DROP TABLE IF EXISTS #TempDepartments;
CREATE TABLE #TempDepartments (
    DEPT_KEY NVARCHAR(50),
    DEPT NVARCHAR(100)
);

-- Insert data into the temporary table
INSERT INTO #TempDepartments (DEPT_KEY, DEPT) VALUES
('ADMINISTRATION', 'Administration'),
('MEDCO', 'Amplify for the Unit'),
('AUDIT COORDINATOR', 'Audit Coordinator'),
('CASH MANAGEMENT', 'Cash Management'),
('CUSTOMER SERVICE', 'Customer Service'),
('DENIALS AND APPEALS', 'Denials & Appeals'),
('DENIALS AND APPEALS', 'Denials Analyst'),
('SELF PAY AND FINANCIAL ASSIST', 'Financial Assistance'),
('GOVERNMENTAL BILLING', 'Governmental Billing'),
('INSURANCE VERIFICATION', 'Insurance Verification'),
('JOC', 'JOC'),
('NON-GOVERNMENTAL BILLING', 'Non-Governmental Billing'),
('NON-GOVERNMENTAL FOLLOW UP', 'Non-Governmental Follow Up'),
('ANALYST TEAM', 'Pt Acct Management'),
('RESEARCH', 'Research Billing'),
('ANALYST TEAM', 'Revenue Cycle Management'),
('REVENUE INTEGRITY', 'Revenue Integrity'),
('VARIANCE UNIT', 'Revenue, Recovery, Retention Unit'),
('SCA UNIT', 'SCA Unit'),
('TRANSFER BILLING', 'Transfer Billing'),
('UNITIZED FOLLOW UP', 'Unitized Follow Up'),
('VENDOR MANAGEMENT', 'Vendor Management');

-- Get inventory changes from cw_dtl_productivity
DROP TABLE IF EXISTS #INVENTORY_TEMP_TBL;
SELECT PVT.[PT_NO],
	PVT.UNIT_SEQ_NO,
	PVT.UNIT_DATE,
	PVT.[DEPARTMENT],
	[OLD] = CASE WHEN PVT.[OLD] IS NULL THEN 0 ELSE 1 END,
	[OFF] = CASE WHEN PVT.[OFF] IS NULL THEN 0 ELSE 1 END,
	[NEW] = CASE WHEN PVT.[NEW] IS NULL THEN 0 ELSE 1 END
INTO #INVENTORY_TEMP_TBL
FROM (
	SELECT [PT_NO] = [PATIENT NO],
		[UNIT_SEQ_NO] = A.[Unit No],
		UNIT_DATE = A.[Unit Date],
		WORKLIST_CHANGE_TYPE = UPPER(IFACCTNEWOLDOFF),
		DEPARTMENT = UPPER(B.USER_DEPT)
	FROM swarm.dbo.CW_DTL_productivity AS A
	LEFT JOIN sms.dbo.revenue_cycle_employee_listing  AS B ON CAST(A.[RESPONSIBLE COLLECTOR] AS VARCHAR) = CAST(B.[User_ID] AS VARCHAR)
	WHERE A.[Report Date] = @PRODREPORTDATE
) AS A

PIVOT (
	MAX(WORKLIST_CHANGE_TYPE)
	FOR WORKLIST_CHANGE_TYPE IN ([OLD],[OFF],[NEW])
) AS PVT;

DROP TABLE IF EXISTS #ENDING_INVENTORY_TBL;
SELECT [PT_NO],
	[UNIT_SEQ_NO],
	[UNIT_DATE],
	[DEPARTMENT],
	[OLD],
	[OFF],
	[NEW],
	[ENDING_INVENTORY] = (([NEW] + [OLD]) - [OFF]),
	[NET_INVENTORY_CHANGE] = (([NEW] + [OLD]) - [OFF]) - ([NEW] + [OLD])
INTO #ENDING_INVENTORY_TBL
FROM #INVENTORY_TEMP_TBL;

-- SECOND CREATE A TBL OF DISTINCT PT_NO, UNIT_NO AND UNIT_DATE
-- ALSO GET DEPARTMENT AND WORKABLE INDICATOR. THIS TEMP TABLE
-- WILL BE JOINED AT THE END TO GET THE ACCT'S WORKED TOTAL
-- AND DOLLARS WORKED TOTAL IN ORDER TO UNION IT TO THE ABOVE
-- QUERY THAT HAS BOTH SNAPSHOT AND PRODUCTIVITY DATA, THIS WILL
-- GIVE US A SINGLE DETAIL TABLE IN WHICH TO PIVOT.
DROP TABLE IF EXISTS #TEMPB;
SELECT A.PT_NO,
	UNIT_NO = CASE 
		WHEN A.UNIT = 'A' 
			THEN NULL 
		ELSE TRY_CONVERT(INT, A.UNIT)
		END,
	A.UNIT_DATE,
	PROD_DB_DEPT = A.DEPT,
	DEPARTMENT_CLEAN = TD.DEPT_KEY,
	WORKABLE_INDICATOR = 'ZZZ NOT IN SNAPSHOT',
	FILE_IND = B.[FILE],
	BALANCE = B.Balance,
	WORKLIST = COALESCE([Worklist Name on Ins1], [Worklist Name on Ins2], [Worklist Name on Ins3], [Worklist Name on Ins4])
INTO #TEMPB
FROM (
	SELECT PT_NO,
		UNIT,
		UNIT_DATE,
		DEPT
	FROM #ACCT_DOLLARS_NOT_IN_SNAPSHOT_TBL

	UNION 

	SELECT PT_NO,
		UNIT,
		UNIT_DATE,
		DEPT
	FROM #ACCTS_WORKED_NOT_IN_SNAPSHOT_TBL
) AS A
LEFT JOIN SMS.DBO.Pt_Accounting_Reporting_for_tableau AS B ON A.PT_NO = B.PT_NO
	AND CASE WHEN A.UNIT != 'A'
		THEN TRY_CONVERT(INT, A.UNIT)
	ELSE ''
	END = ISNULL(B.UNIT_NO, '')
LEFT JOIN #TempDepartments AS TD ON A.DEPT = TD.DEPT;

-- GET ACCTS_WORKED AND DOLLARS_WORKED INTO #TEMPC
DROP TABLE IF EXISTS #TEMPC;
SELECT A.PT_NO,
	A.UNIT_NO,
	A.UNIT_DATE,
	--A.PROD_DB_DEPT,
	A.DEPARTMENT_CLEAN,
	A.WORKABLE_INDICATOR,
	ACCTS_WORKED = (
		SELECT SUM(ACCTS_WORKED)
		FROM #ACCTS_WORKED_NOT_IN_SNAPSHOT_TBL AS Z
		WHERE Z.PT_NO = A.PT_NO
			AND (
				(
					-- WHERE EACH IS NUMERIC
					Z.UNIT IS NOT NULL
					AND Z.UNIT != 'Z'
					AND A.UNIT_NO = TRY_CONVERT(INT, Z.UNIT)
				)
				OR (
					-- IF UNIT NO IS NULL THEN MATCH ON THE A
					A.UNIT_NO IS NULL
					AND Z.UNIT = 'A'
				)
			)
			AND A.PROD_DB_DEPT = Z.DEPT
	),
	DOLLARS_WORKED = (
		SELECT SUM(Z.FOLLOWUP_AMT)
		FROM #ACCT_DOLLARS_NOT_IN_SNAPSHOT_TBL AS Z
		WHERE Z.PT_NO = A.PT_NO
			AND (
				(
					-- WHERE EACH IS NUMERIC
					Z.UNIT IS NOT NULL
					AND Z.UNIT != 'Z'
					AND A.UNIT_NO = TRY_CONVERT(INT, Z.UNIT)
				)
				OR (
					-- IF UNIT NO IS NULL THEN MATCH ON THE A
					A.UNIT_NO IS NULL
					AND Z.UNIT = 'A'
				)
			)
			AND A.PROD_DB_DEPT = Z.DEPT
	),
	A.FILE_IND, 
	A.BALANCE,
	A.WORKLIST
INTO #TEMPC
FROM #TEMPB AS A;

-- BRING IT ALL TOGETHER FOR PRODUCTIVITY
DROP TABLE IF EXISTS #INVISION_PRODUCTIVITY_SNAP_TBL;
SELECT A.*
INTO #INVISION_PRODUCTIVITY_SNAP_TBL
FROM (
	SELECT PT_NO,
		UNIT_NO,
		UNIT_DATE = CAST(CAST(UNIT_DATE AS DATETIME2) AS DATETIME),
		DEPARTMENT_CLEAN,
		WORKABLE_INDICATOR,
		ACCTS_WORKED,
		DOLLARS_WORKED,
		FILE_IND = NULL,
		BALANCE = NULL,
		WORKLIST = NULL
	FROM #TEMPA

	UNION

	SELECT PT_NO,
		UNIT_NO,
		UNIT_DATE = CAST(CAST(UNIT_DATE AS DATETIME2) AS DATETIME),
		DEPARTMENT_CLEAN,
		WORKABLE_INDICATOR,
		ACCTS_WORKED,
		DOLLARS_WORKED,
		FILE_IND,
		BALANCE,
		WORKLIST

	FROM #TEMPC
) AS A;

-- BRING IN FINTHRIVE DATA
DROP TABLE IF EXISTS #FINTHRIVE_DATA_TBL;
SELECT A.PATIENT_ACCOUNT_NUMBER,
	A.PT_NO,
	A.UNIT_SEQ_NO,
	A.CLAIM_ID,
	A.EXPORT_OUTGOING_CLAIM_CHARGES,
	A.LOG_DESCRIPTION,
	A.ACTION_USER_NAME,
	A.EVENT_DATE,
	A.[SOURCE],
	A.[SOURCEFILE],
	A.IMPORTDATE,
	B.DEPARTMENT
INTO #FINTHRIVE_DATA_TBL
FROM SMS.dbo.c_finthrive_productivity_tbl AS A
LEFT JOIN SMS.dbo.c_finthrive_emp_crosswalk_tbl AS B ON A.action_user_name = B.emp_id
WHERE A.EVENT_DATE BETWEEN @FINTHRIVE_START_DATE AND @FINTHRIVE_END_DATE;

-- JOIN FINTHRIVE_DATA_TBL TO THE FINAL OUTPUT FROM PRODUCTIVITY
WITH FINAL_RESULTS AS (
	SELECT DISTINCT A.PT_NO,
		A.UNIT_NO,
		A.UNIT_DATE,
		[DEPARTMENT_CLEAN] = CASE WHEN A.DEPARTMENT_CLEAN = 'DENIALS ANALYST' THEN 'DENIALS AND APPEALS'
									WHEN A.DEPARTMENT_CLEAN = '' THEN NULL
									ELSE A.DEPARTMENT_CLEAN
									END,
		[FINTHRIVE_DEPARTMENT] = (
			SELECT TOP 1 Z.DEPARTMENT
			FROM #FINTHRIVE_DATA_TBL AS Z
			WHERE Z.PT_NO = A.PT_NO
			AND ISNULL(Z.UNIT_SEQ_NO, '') = ISNULL(A.UNIT_NO, '')
		),
		A.WORKABLE_INDICATOR,
		A.ACCTS_WORKED,
		A.DOLLARS_WORKED,
		A.FILE_IND,
		A.BALANCE,
		A.WORKLIST,
		FINTHRIVE_TOUCHES = (
			SELECT COUNT(DISTINCT(Z.CLAIM_ID))
			FROM #FINTHRIVE_DATA_TBL AS Z
			WHERE Z.PT_NO = A.PT_NO
			AND ISNULL(Z.UNIT_SEQ_NO,'') = ISNULL(A.UNIT_NO, '')
		),
		FINTHRIVE_DOLLARS_WORKED = (SELECT SUM(export_outgoing_claim_charges)
			FROM #FINTHRIVE_DATA_TBL AS Z
			WHERE Z.PT_NO = A.PT_NO
			AND ISNULL(Z.UNIT_SEQ_NO,'') = ISNULL(A.UNIT_NO, '')
		),
		B.[ENDING_INVENTORY],
		B.[NET_INVENTORY_CHANGE]
	FROM #INVISION_PRODUCTIVITY_SNAP_TBL AS A
	LEFT JOIN #ENDING_INVENTORY_TBL AS B ON A.PT_NO = B.PT_NO
		AND ISNULL(A.UNIT_NO, '') = ISNULL(B.UNIT_SEQ_NO, '')
		AND ISNULL(A.UNIT_DATE, '') = ISNULL(B.UNIT_DATE, '')
)

SELECT [PT_NO],
	[UNIT_NO],
	[UNIT_DATE],
	[DEPARTMENT] = COALESCE(FINTHRIVE_DEPARTMENT, DEPARTMENT_CLEAN),
	[WORKABLE_INDICATOR],
	[ACCTS_WORKED],
	[DOLLARS_WORKED],
	[FILE_IND],
	[BALANCE],
	[WORKLIST],
	[FINTHRIVE_TOUCHES],
	[FINTHRIVE_DOLLARS_WORKED],
	[ENDING_INVENTORY],
	[NET_INVENTORY_CHANGE]
FROM FINAL_RESULTS